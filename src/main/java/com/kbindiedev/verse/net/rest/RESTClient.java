package com.kbindiedev.verse.net.rest;

import java.io.IOException;
import java.net.*;
import java.util.List;

//TODO: this may be useful to read: https://stackoverflow.com/questions/2793150/how-to-use-java-net-urlconnection-to-fire-and-handle-http-requests
/** A class that allows the user to define an api-endpoint that they then can execute REST requests towards easily. */
public class RESTClient {

    //TODO: options
    private static final boolean enforceSSL = false;

    private URL urlBase;
    private CookieManager cookieManager;

    public RESTClient(String urlBase) {
        if (urlBase == null) throw new IllegalArgumentException("urlBase must not be null");
        if (enforceSSL && urlBase.startsWith("http://")) throw new IllegalArgumentException("urlBase has protocol 'http', however enforceSSL is true for urlBase: " + urlBase); //TODO: here
        if (!urlBase.startsWith("http://") && !urlBase.startsWith("https://")) throw new IllegalArgumentException("urlBase must have protocol 'http' or 'https'");

        try { this.urlBase = new URL(urlBase); } catch (MalformedURLException e) { throw new RuntimeException(e); } //should never happen due to protocol checks

        cookieManager = new CookieManager();
    }

    /**
     * Report that a response generated by this client received a 'Set-Cookie' header.
     * This method may be run several times by a {@see RESTClientResponse}.
     * It is assumed that cookies are reported as they are encountered, and as such, the response's request's
     *      execution timestamp is not taken into account (due to possible delays in receiving responses).
     * Any reported cookies will be stored depending on the cookie-preservation configuration setting.   //TODO: cookie preservation setting
     * @param origin - The response that is reporting this cookie.
     * @param cookie - The cookie being reported.
     */
    protected void reportSetCookie(RESTClientResponse origin, HttpCookie cookie) { //TODO: cookie callback to user ?

        //TODO: if followed redirect, then this URI may be wrong
        //TODO: clean (if URI immutable after request execution, then exceptions cannot occur)
        try {
            URI uri = origin.getRequest().getURI();
            cookieManager.getCookieStore().add(uri, cookie);

            System.out.printf("reported cookie for uri: %s, cookie: %s\n", uri, cookie);
        } catch (MalformedURLException | URISyntaxException e) {
            e.printStackTrace();
        }

    }

    /**
     * Get a list of all cookies, sorted by a URI, that should be put on a request to a server.
     * @param uri - The URI of the request
     * @return a list of cookies that should be put in the 'Cookie' header
     */
    protected List<HttpCookie> getCookies(URI uri) { return cookieManager.getCookieStore().get(uri); }

    //TODO: temp
    public void tempPrintCookies(String url) {
        try {
            URI uri = new URI(url);
            List<HttpCookie> cookies = cookieManager.getCookieStore().get(uri);
            System.out.println(cookies);
        } catch (Exception e) { e.printStackTrace(); }
    }

    /** Initialize a new request. */
    public RESTClientRequest newRequest() { return new RESTClientRequest(this); }

    //TODO: follow redirects ?

    public String getBaseUrl() { return urlBase.toString(); } //TODO: prettify

}
