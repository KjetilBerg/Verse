package com.kbindiedev.verse.net.rest;

import java.net.*;
import java.util.List;

//TODO NOTE: supports HTTP 1.xxx
//TODO: this may be useful to read: https://stackoverflow.com/questions/2793150/how-to-use-java-net-urlconnection-to-fire-and-handle-http-requests
//TODO: document the overal structure
/** A class that allows the user to define an api-endpoint that they then can execute REST requests towards easily. */
public class RESTClient {

    private static RESTClientSettings globalClientSettings = new RESTClientSettings();
    private static RESTClientRequestSettings globalRequestSettings = new RESTClientRequestSettings();

    //TODO: javadocs
    public static RESTClientSettings getGlobalClientSettings() { return globalClientSettings; }
    public static RESTClientRequestSettings getGlobalRequestSettings() { return globalRequestSettings; }
    public static void setGlobalClientSettings(RESTClientSettings settings) { globalClientSettings = settings; }
    public static void setGlobalRequestSettings(RESTClientRequestSettings settings) { globalRequestSettings = settings; }


    private ICookieManager cookieManager = new ICookieManager() {

        private CookieManager cookieManager = new CookieManager();

        //TODO: defaults explanations and javadocs
        @Override
        public void reportSetCookie(RESTClientResponse origin, HttpCookie cookie) {
            if (!clientSettings.shouldPreserveCookies()) return;
            URI uri = origin.getDestinationURI();
            cookieManager.getCookieStore().add(uri, cookie);
        }

        @Override
        public List<HttpCookie> getCookies(URI uri) { return cookieManager.getCookieStore().get(uri); }
    };


    private String base;
    private RESTClientRequestSettings requestSettings;
    private RESTClientSettings clientSettings;

    /** Create a RESTClient with an empty base string. */
    public RESTClient() { this(""); }

    /**
     * Create a RESTClient.
     * @param base - Will be prepended to (come first in) the url defined by new requests before executing them.
     */
    public RESTClient(String base) {
        this.base = base;

        clientSettings = new RESTClientSettings();
        requestSettings = new RESTClientRequestSettings();
    }

    /**
     * Get the base.
     * The "base" is prepended to every request generated by this client.
     * @return the string to be prepended to every request generated by this client.
     */
    public String getBase() { return base; }

    /**
     * Set the base.
     * The "base" is prepended to every request generated by this client.
     * The value of base is prepended upon that request's execution, so changing it before executing a request
     *      WILL affect that request.
     * @param base - The base.
     */
    public void setBase(String base) { this.base = base; }

    //TODO: javadoc
    public void setClientSettings(RESTClientSettings settings) { this.clientSettings = settings; }

    /**
     * Set this client's "request settings".
     * These default to the ones defined as default by {@see RESTClientRequestSettings}.
     * These will be applied to all future generated requests.
     *      You can manually override them by using the {@see RESTClientRequest#setSettings()} method.
     * @param settings - The settings.
     */
    public void setRequestSettings(RESTClientRequestSettings settings) {
        this.requestSettings = settings;
    }

//TODO: javadoc
    public ICookieManager getCookieManager() { return cookieManager; }

    public void setCookieManager(ICookieManager manager) { this.cookieManager = manager; }

    //TODO: javadoc (package private)
    RESTClientRequestSettings getRequestSettings() { return requestSettings; }
    RESTClientSettings getClientSettings() { return clientSettings; }



    //TODO: javadoc
    /**
     * Report that a response generated by this client received a 'Set-Cookie' header.
     * This method may be run several times by a {@see RESTClientResponse}.
     * It is assumed that cookies are reported as they are encountered, and as such, the response's request's
     *      execution timestamp does not need to be taken into account (due to possible delays in receiving responses).
     * This will go by the currently set cookieManager {@see #setCookieManager()} and {@see #getCookieManager()}.
     * The default {@code cookieManager} operates by RFC 6265 (https://datatracker.ietf.org/doc/html/rfc6265)
     *      (cookies will be stored by their URI,
     *      but cookies will be ignored if the cookie-preservation setting dictates so).    //TODO: setting
     * @param origin - The response that is reporting this cookie.
     * @param cookie - The cookie being reported.
     * @see #setCookieManager(ICookieManager)
     * @see #getCookieManager()
     */
    protected void reportSetCookie(RESTClientResponse origin, HttpCookie cookie) {
        cookieManager.reportSetCookie(origin, cookie);
    }

    /**
     * Get a list of all cookies, by a URI, that should be a request to a server (during execution of that uri).
     * This will go by the currently set {@code cookieManager} {@see #setCookieManager()} and {@see #getCookieManager()}.
     * The default {@code cookieManager} operates by RFC 6265 (https://datatracker.ietf.org/doc/html/rfc6265)
     *      (will return a list of cookies fitting the provided URI).
     * @param uri - The URI of the request.
     * @return a list of cookies that should be put in the 'Cookie' header.
     * @see #setCookieManager(ICookieManager)
     * @see #getCookieManager()
     */
    protected List<HttpCookie> getCookies(URI uri) { return cookieManager.getCookies(uri); }

    //TODO: temp
    public void tempPrintCookies(String url) {
        try {
            URI uri = new URI(url);
            List<HttpCookie> cookies = getCookies(uri);
            System.out.println(cookies);
        } catch (Exception e) { e.printStackTrace(); }
    }

    /** Initialize a new request. */
    public RESTClientRequest newRequest() { return new RESTClientRequest(this); }

}
